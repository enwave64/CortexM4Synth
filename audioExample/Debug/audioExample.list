
audioExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002374  08002374  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08002374  08002374  00012374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002378  08002378  00012378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  0800237c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          000000b0  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000d0  200000d0  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005b98  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001131  00000000  00000000  00025be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c8  00000000  00000000  00026d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000710  00000000  00000000  000274e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002bec  00000000  00000000  00027bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000026bd  00000000  00000000  0002a7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002cea1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002180  00000000  00000000  0002cf20  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800235c 	.word	0x0800235c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	0800235c 	.word	0x0800235c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <DAC_SetChannel1Data+0x34>)
 8000a5e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	3308      	adds	r3, #8
 8000a68:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	6013      	str	r3, [r2, #0]
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40007400 	.word	0x40007400

08000a84 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <DMA_Init+0xac>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000aae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000aba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ac6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000acc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ad2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f023 0307 	bic.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4313      	orrs	r3, r2
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60da      	str	r2, [r3, #12]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	f01c803f 	.word	0xf01c803f

08000b34 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f043 0201 	orr.w	r2, r3, #1
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000b52:	e005      	b.n	8000b60 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f023 0201 	bic.w	r2, r3, #1
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e001      	b.n	8000b8e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <DMA_GetFlagStatus+0x6c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d802      	bhi.n	8000bbc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <DMA_GetFlagStatus+0x70>)
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	e001      	b.n	8000bc0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <DMA_GetFlagStatus+0x74>)
 8000bbe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e002      	b.n	8000bd8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000bde:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000be2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	4013      	ands	r3, r2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	75fb      	strb	r3, [r7, #23]
 8000bf2:	e001      	b.n	8000bf8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	371c      	adds	r7, #28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	4002640f 	.word	0x4002640f
 8000c0c:	40026000 	.word	0x40026000
 8000c10:	40026400 	.word	0x40026400

08000c14 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <DMA_ClearFlag+0x50>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d802      	bhi.n	8000c2c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <DMA_ClearFlag+0x54>)
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e001      	b.n	8000c30 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <DMA_ClearFlag+0x58>)
 8000c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d007      	beq.n	8000c4a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c40:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000c48:	e006      	b.n	8000c58 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c50:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	6093      	str	r3, [r2, #8]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	4002640f 	.word	0x4002640f
 8000c68:	40026000 	.word	0x40026000
 8000c6c:	40026400 	.word	0x40026400

08000c70 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e076      	b.n	8000d7a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d165      	bne.n	8000d74 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	791b      	ldrb	r3, [r3, #4]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d003      	beq.n	8000ce6 <GPIO_Init+0x76>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d12e      	bne.n	8000d44 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2103      	movs	r1, #3
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	795b      	ldrb	r3, [r3, #5]
 8000d04:	4619      	mov	r1, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2301      	movs	r3, #1
 8000d20:	408b      	lsls	r3, r1
 8000d22:	43db      	mvns	r3, r3
 8000d24:	401a      	ands	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	7992      	ldrb	r2, [r2, #6]
 8000d32:	4611      	mov	r1, r2
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2103      	movs	r1, #3
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	79db      	ldrb	r3, [r3, #7]
 8000d64:	4619      	mov	r1, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d985      	bls.n	8000c8c <GPIO_Init+0x1c>
    }
  }
}
 8000d80:	bf00      	nop
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	71da      	strb	r2, [r3, #7]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	831a      	strh	r2, [r3, #24]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	887a      	ldrh	r2, [r7, #2]
 8000dee:	835a      	strh	r2, [r3, #26]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e14:	787a      	ldrb	r2, [r7, #1]
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	08db      	lsrs	r3, r3, #3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	887b      	ldrh	r3, [r7, #2]
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	210f      	movs	r1, #15
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	ea02 0103 	and.w	r1, r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f100 0208 	add.w	r2, r0, #8
 8000e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	08db      	lsrs	r3, r3, #3
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <I2C_DeInit+0x68>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d10a      	bne.n	8000eb6 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000ea6:	f000 fb07 	bl	80014b8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000eaa:	2100      	movs	r1, #0
 8000eac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000eb0:	f000 fb02 	bl	80014b8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000eb4:	e01c      	b.n	8000ef0 <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a10      	ldr	r2, [pc, #64]	; (8000efc <I2C_DeInit+0x6c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10a      	bne.n	8000ed4 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ec4:	f000 faf8 	bl	80014b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ece:	f000 faf3 	bl	80014b8 <RCC_APB1PeriphResetCmd>
}
 8000ed2:	e00d      	b.n	8000ef0 <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <I2C_DeInit+0x70>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d109      	bne.n	8000ef0 <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000edc:	2101      	movs	r1, #1
 8000ede:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ee2:	f000 fae9 	bl	80014b8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000eec:	f000 fae4 	bl	80014b8 <RCC_APB1PeriphResetCmd>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40005800 	.word	0x40005800
 8000f00:	40005c00 	.word	0x40005c00

08000f04 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f12:	2300      	movs	r3, #0
 8000f14:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000f16:	2304      	movs	r3, #4
 8000f18:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000f1a:	4b57      	ldr	r3, [pc, #348]	; (8001078 <I2C_Init+0x174>)
 8000f1c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f2a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f9d9 	bl	80012e8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <I2C_Init+0x178>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0c9b      	lsrs	r3, r3, #18
 8000f44:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000f46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f52:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a44      	ldr	r2, [pc, #272]	; (8001080 <I2C_Init+0x17c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d815      	bhi.n	8000f9e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d801      	bhi.n	8000f8a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000f86:	2304      	movs	r3, #4
 8000f88:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000f8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000f92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	841a      	strh	r2, [r3, #32]
 8000f9c:	e040      	b.n	8001020 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	88db      	ldrh	r3, [r3, #6]
 8000fa2:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d109      	bne.n	8000fbe <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000fbc:	e00e      	b.n	8000fdc <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009a      	lsls	r2, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000fee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ffe:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001002:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <I2C_Init+0x180>)
 800100c:	fb82 1203 	smull	r1, r2, r2, r3
 8001010:	1192      	asrs	r2, r2, #6
 8001012:	17db      	asrs	r3, r3, #31
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001024:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800103c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800103e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001042:	f023 0302 	bic.w	r3, r3, #2
 8001046:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	889a      	ldrh	r2, [r3, #4]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	895b      	ldrh	r3, [r3, #10]
 8001050:	4313      	orrs	r3, r2
 8001052:	b29a      	uxth	r2, r3
 8001054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001056:	4313      	orrs	r3, r2
 8001058:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800105e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	899a      	ldrh	r2, [r3, #12]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	891b      	ldrh	r3, [r3, #8]
 8001068:	4313      	orrs	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	811a      	strh	r2, [r3, #8]
}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	007a1200 	.word	0x007a1200
 800107c:	431bde83 	.word	0x431bde83
 8001080:	000186a0 	.word	0x000186a0
 8001084:	10624dd3 	.word	0x10624dd3

08001088 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 80010aa:	e007      	b.n	80010bc <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	801a      	strh	r2, [r3, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 80010ea:	e007      	b.n	80010fc <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	801a      	strh	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b29b      	uxth	r3, r3
 8001120:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001124:	b29a      	uxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 800112a:	e007      	b.n	800113c <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	801a      	strh	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001158:	78bb      	ldrb	r3, [r7, #2]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	70fb      	strb	r3, [r7, #3]
 8001166:	e003      	b.n	8001170 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	821a      	strh	r2, [r3, #16]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d008      	beq.n	80011a8 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 80011a6:	e007      	b.n	80011b8 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	801a      	strh	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	821a      	strh	r2, [r3, #16]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	8a1b      	ldrh	r3, [r3, #16]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001216:	2300      	movs	r3, #0
 8001218:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	8a9b      	ldrh	r3, [r3, #20]
 800121e:	b29b      	uxth	r3, r3
 8001220:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	8b1b      	ldrh	r3, [r3, #24]
 8001226:	b29b      	uxth	r3, r3
 8001228:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	041b      	lsls	r3, r3, #16
 800122e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4313      	orrs	r3, r2
 8001236:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800123a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	401a      	ands	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d102      	bne.n	800124e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001248:	2301      	movs	r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
 800124c:	e001      	b.n	8001252 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800124e:	2300      	movs	r3, #0
 8001250:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001252:	7dfb      	ldrb	r3, [r7, #23]
}
 8001254:	4618      	mov	r0, r3
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	0f1b      	lsrs	r3, r3, #28
 800127e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001286:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3314      	adds	r3, #20
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e005      	b.n	80012a2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	0c1b      	lsrs	r3, r3, #16
 800129a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3318      	adds	r3, #24
 80012a0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80012ae:	2301      	movs	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	e001      	b.n	80012b8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	371c      	adds	r7, #28
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <RCC_PLLI2SCmd+0x1c>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	42470068 	.word	0x42470068

080012e8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	2302      	movs	r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	2302      	movs	r3, #2
 8001306:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001308:	4b47      	ldr	r3, [pc, #284]	; (8001428 <RCC_GetClocksFreq+0x140>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d007      	beq.n	8001328 <RCC_GetClocksFreq+0x40>
 8001318:	2b08      	cmp	r3, #8
 800131a:	d009      	beq.n	8001330 <RCC_GetClocksFreq+0x48>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d13d      	bne.n	800139c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a42      	ldr	r2, [pc, #264]	; (800142c <RCC_GetClocksFreq+0x144>)
 8001324:	601a      	str	r2, [r3, #0]
      break;
 8001326:	e03d      	b.n	80013a4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a41      	ldr	r2, [pc, #260]	; (8001430 <RCC_GetClocksFreq+0x148>)
 800132c:	601a      	str	r2, [r3, #0]
      break;
 800132e:	e039      	b.n	80013a4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001330:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <RCC_GetClocksFreq+0x140>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	0d9b      	lsrs	r3, r3, #22
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <RCC_GetClocksFreq+0x140>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001344:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00c      	beq.n	8001366 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800134c:	4a38      	ldr	r2, [pc, #224]	; (8001430 <RCC_GetClocksFreq+0x148>)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	4a34      	ldr	r2, [pc, #208]	; (8001428 <RCC_GetClocksFreq+0x140>)
 8001356:	6852      	ldr	r2, [r2, #4]
 8001358:	0992      	lsrs	r2, r2, #6
 800135a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	e00b      	b.n	800137e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001366:	4a31      	ldr	r2, [pc, #196]	; (800142c <RCC_GetClocksFreq+0x144>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <RCC_GetClocksFreq+0x140>)
 8001370:	6852      	ldr	r2, [r2, #4]
 8001372:	0992      	lsrs	r2, r2, #6
 8001374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <RCC_GetClocksFreq+0x140>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	3301      	adds	r3, #1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	fbb2 f2f3 	udiv	r2, r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
      break;
 800139a:	e003      	b.n	80013a4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <RCC_GetClocksFreq+0x144>)
 80013a0:	601a      	str	r2, [r3, #0]
      break;
 80013a2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <RCC_GetClocksFreq+0x140>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ac:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013b4:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <RCC_GetClocksFreq+0x14c>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <RCC_GetClocksFreq+0x140>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80013d4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	0a9b      	lsrs	r3, r3, #10
 80013da:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013dc:	4a15      	ldr	r2, [pc, #84]	; (8001434 <RCC_GetClocksFreq+0x14c>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	40da      	lsrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <RCC_GetClocksFreq+0x140>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	0b5b      	lsrs	r3, r3, #13
 8001402:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <RCC_GetClocksFreq+0x14c>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	40da      	lsrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	60da      	str	r2, [r3, #12]
}
 800141c:	bf00      	nop
 800141e:	3724      	adds	r7, #36	; 0x24
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40023800 	.word	0x40023800
 800142c:	00f42400 	.word	0x00f42400
 8001430:	007a1200 	.word	0x007a1200
 8001434:	20000000 	.word	0x20000000

08001438 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800144a:	490a      	ldr	r1, [pc, #40]	; (8001474 <RCC_AHB1PeriphClockCmd+0x3c>)
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <RCC_AHB1PeriphClockCmd+0x3c>)
 800144e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4313      	orrs	r3, r2
 8001454:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001456:	e006      	b.n	8001466 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001458:	4906      	ldr	r1, [pc, #24]	; (8001474 <RCC_AHB1PeriphClockCmd+0x3c>)
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <RCC_AHB1PeriphClockCmd+0x3c>)
 800145c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	43db      	mvns	r3, r3
 8001462:	4013      	ands	r3, r2
 8001464:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800148a:	490a      	ldr	r1, [pc, #40]	; (80014b4 <RCC_APB1PeriphClockCmd+0x3c>)
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <RCC_APB1PeriphClockCmd+0x3c>)
 800148e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001496:	e006      	b.n	80014a6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001498:	4906      	ldr	r1, [pc, #24]	; (80014b4 <RCC_APB1PeriphClockCmd+0x3c>)
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <RCC_APB1PeriphClockCmd+0x3c>)
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80014ca:	490a      	ldr	r1, [pc, #40]	; (80014f4 <RCC_APB1PeriphResetCmd+0x3c>)
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <RCC_APB1PeriphResetCmd+0x3c>)
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80014d6:	e006      	b.n	80014e6 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80014d8:	4906      	ldr	r1, [pc, #24]	; (80014f4 <RCC_APB1PeriphResetCmd+0x3c>)
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <RCC_APB1PeriphResetCmd+0x3c>)
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4013      	ands	r3, r2
 80014e4:	620b      	str	r3, [r1, #32]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800150a:	490a      	ldr	r1, [pc, #40]	; (8001534 <RCC_APB2PeriphResetCmd+0x3c>)
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <RCC_APB2PeriphResetCmd+0x3c>)
 800150e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4313      	orrs	r3, r2
 8001514:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001516:	e006      	b.n	8001526 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001518:	4906      	ldr	r1, [pc, #24]	; (8001534 <RCC_APB2PeriphResetCmd+0x3c>)
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <RCC_APB2PeriphResetCmd+0x3c>)
 800151c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	43db      	mvns	r3, r3
 8001522:	4013      	ands	r3, r2
 8001524:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <SPI_I2S_DeInit+0xc4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d10a      	bne.n	800155e <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001548:	2101      	movs	r1, #1
 800154a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800154e:	f7ff ffd3 	bl	80014f8 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001552:	2100      	movs	r1, #0
 8001554:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001558:	f7ff ffce 	bl	80014f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800155c:	e049      	b.n	80015f2 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <SPI_I2S_DeInit+0xc8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10a      	bne.n	800157c <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001566:	2101      	movs	r1, #1
 8001568:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800156c:	f7ff ffa4 	bl	80014b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001570:	2100      	movs	r1, #0
 8001572:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001576:	f7ff ff9f 	bl	80014b8 <RCC_APB1PeriphResetCmd>
}
 800157a:	e03a      	b.n	80015f2 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <SPI_I2S_DeInit+0xcc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d10a      	bne.n	800159a <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001584:	2101      	movs	r1, #1
 8001586:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800158a:	f7ff ff95 	bl	80014b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800158e:	2100      	movs	r1, #0
 8001590:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001594:	f7ff ff90 	bl	80014b8 <RCC_APB1PeriphResetCmd>
}
 8001598:	e02b      	b.n	80015f2 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <SPI_I2S_DeInit+0xd0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10a      	bne.n	80015b8 <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80015a2:	2101      	movs	r1, #1
 80015a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015a8:	f7ff ffa6 	bl	80014f8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80015ac:	2100      	movs	r1, #0
 80015ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015b2:	f7ff ffa1 	bl	80014f8 <RCC_APB2PeriphResetCmd>
}
 80015b6:	e01c      	b.n	80015f2 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <SPI_I2S_DeInit+0xd4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10a      	bne.n	80015d6 <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80015c0:	2101      	movs	r1, #1
 80015c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80015c6:	f7ff ff97 	bl	80014f8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80015ca:	2100      	movs	r1, #0
 80015cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80015d0:	f7ff ff92 	bl	80014f8 <RCC_APB2PeriphResetCmd>
}
 80015d4:	e00d      	b.n	80015f2 <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <SPI_I2S_DeInit+0xd8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d109      	bne.n	80015f2 <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80015de:	2101      	movs	r1, #1
 80015e0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80015e4:	f7ff ff88 	bl	80014f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80015e8:	2100      	movs	r1, #0
 80015ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80015ee:	f7ff ff83 	bl	80014f8 <RCC_APB2PeriphResetCmd>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40013000 	.word	0x40013000
 8001600:	40003800 	.word	0x40003800
 8001604:	40003c00 	.word	0x40003c00
 8001608:	40013400 	.word	0x40013400
 800160c:	40015000 	.word	0x40015000
 8001610:	40015400 	.word	0x40015400

08001614 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001614:	b480      	push	{r7}
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800161e:	2300      	movs	r3, #0
 8001620:	837b      	strh	r3, [r7, #26]
 8001622:	2302      	movs	r3, #2
 8001624:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001626:	2300      	movs	r3, #0
 8001628:	84bb      	strh	r3, [r7, #36]	; 0x24
 800162a:	2301      	movs	r3, #1
 800162c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	8b9b      	ldrh	r3, [r3, #28]
 8001646:	b29b      	uxth	r3, r3
 8001648:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800164c:	f023 030f 	bic.w	r3, r3, #15
 8001650:	b29a      	uxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	8b9b      	ldrh	r3, [r3, #28]
 8001660:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d104      	bne.n	8001674 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 800166a:	2300      	movs	r3, #0
 800166c:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800166e:	2302      	movs	r3, #2
 8001670:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001672:	e06d      	b.n	8001750 <I2S_Init+0x13c>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	889b      	ldrh	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800167c:	2301      	movs	r3, #1
 800167e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001680:	e001      	b.n	8001686 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001686:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <I2S_Init+0x1a0>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <I2S_Init+0x1a0>)
 8001694:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <I2S_Init+0x1a0>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800169c:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800169e:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <I2S_Init+0x1a0>)
 80016a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016aa:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80016ac:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <I2S_Init+0x1a0>)
 80016ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016b2:	0f1b      	lsrs	r3, r3, #28
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <I2S_Init+0x1a0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c2:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80016c4:	4a3c      	ldr	r2, [pc, #240]	; (80017b8 <I2S_Init+0x1a4>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	fb02 f203 	mul.w	r2, r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d8:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	88db      	ldrh	r3, [r3, #6]
 80016de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e2:	d10f      	bne.n	8001704 <I2S_Init+0xf0>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	0a1a      	lsrs	r2, r3, #8
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	461a      	mov	r2, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	3305      	adds	r3, #5
 80016fe:	b29b      	uxth	r3, r3
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	e012      	b.n	800172a <I2S_Init+0x116>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001704:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001706:	015b      	lsls	r3, r3, #5
 8001708:	461a      	mov	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	461a      	mov	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	3305      	adds	r3, #5
 8001726:	b29b      	uxth	r3, r3
 8001728:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <I2S_Init+0x1a8>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	b29b      	uxth	r3, r3
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800174a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001752:	2b01      	cmp	r3, #1
 8001754:	d902      	bls.n	800175c <I2S_Init+0x148>
 8001756:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001758:	2bff      	cmp	r3, #255	; 0xff
 800175a:	d903      	bls.n	8001764 <I2S_Init+0x150>
  {
    /* Set the default values */
    i2sdiv = 2;
 800175c:	2302      	movs	r3, #2
 800175e:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	88da      	ldrh	r2, [r3, #6]
 8001768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800176a:	4313      	orrs	r3, r2
 800176c:	b29a      	uxth	r2, r3
 800176e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001770:	4313      	orrs	r3, r2
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	8859      	ldrh	r1, [r3, #2]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001788:	4303      	orrs	r3, r0
 800178a:	b29b      	uxth	r3, r3
 800178c:	430b      	orrs	r3, r1
 800178e:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001790:	4313      	orrs	r3, r2
 8001792:	b29a      	uxth	r2, r3
 8001794:	8b7b      	ldrh	r3, [r7, #26]
 8001796:	4313      	orrs	r3, r2
 8001798:	b29b      	uxth	r3, r3
 800179a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179e:	837b      	strh	r3, [r7, #26]
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	8b7a      	ldrh	r2, [r7, #26]
 80017a4:	839a      	strh	r2, [r3, #28]
}
 80017a6:	bf00      	nop
 80017a8:	372c      	adds	r7, #44	; 0x2c
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	007a1200 	.word	0x007a1200
 80017bc:	cccccccd 	.word	0xcccccccd

080017c0 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	8b9b      	ldrh	r3, [r3, #28]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017dc:	b29a      	uxth	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 80017e2:	e007      	b.n	80017f4 <I2S_Cmd+0x34>
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8b9b      	ldrh	r3, [r3, #28]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	839a      	strh	r2, [r3, #28]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	819a      	strh	r2, [r3, #12]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	891b      	ldrh	r3, [r3, #8]
 8001832:	b29a      	uxth	r2, r3
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	4013      	ands	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e001      	b.n	8001848 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800185c:	4b38      	ldr	r3, [pc, #224]	; (8001940 <Audio_MAL_IRQHandler+0xe8>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <Audio_MAL_IRQHandler+0xec>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f7ff f998 	bl	8000b9c <DMA_GetFlagStatus>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d064      	beq.n	800193c <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001872:	4b35      	ldr	r3, [pc, #212]	; (8001948 <Audio_MAL_IRQHandler+0xf0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d04c      	beq.n	8001914 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800187a:	bf00      	nop
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <Audio_MAL_IRQHandler+0xe8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f973 	bl	8000b6c <DMA_GetCmdStatus>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f7      	bne.n	800187c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <Audio_MAL_IRQHandler+0xe8>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <Audio_MAL_IRQHandler+0xec>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f7ff f9bc 	bl	8000c14 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <Audio_MAL_IRQHandler+0xf4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <Audio_MAL_IRQHandler+0xf8>)
 80018a4:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <Audio_MAL_IRQHandler+0xf0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ae:	4293      	cmp	r3, r2
 80018b0:	bf28      	it	cs
 80018b2:	4613      	movcs	r3, r2
 80018b4:	4a26      	ldr	r2, [pc, #152]	; (8001950 <Audio_MAL_IRQHandler+0xf8>)
 80018b6:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <Audio_MAL_IRQHandler+0xe8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4924      	ldr	r1, [pc, #144]	; (8001950 <Audio_MAL_IRQHandler+0xf8>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f8e0 	bl	8000a84 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <Audio_MAL_IRQHandler+0xe8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f932 	bl	8000b34 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <Audio_MAL_IRQHandler+0xf4>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <Audio_MAL_IRQHandler+0xf0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	d203      	bcs.n	80018e6 <Audio_MAL_IRQHandler+0x8e>
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <Audio_MAL_IRQHandler+0xf0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	e000      	b.n	80018e8 <Audio_MAL_IRQHandler+0x90>
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <Audio_MAL_IRQHandler+0xfc>)
 80018e8:	4413      	add	r3, r2
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <Audio_MAL_IRQHandler+0xf4>)
 80018ec:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <Audio_MAL_IRQHandler+0xf0>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <Audio_MAL_IRQHandler+0xf0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018fa:	428b      	cmp	r3, r1
 80018fc:	bf28      	it	cs
 80018fe:	460b      	movcs	r3, r1
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <Audio_MAL_IRQHandler+0xf0>)
 8001904:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <Audio_MAL_IRQHandler+0xe8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f911 	bl	8000b34 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001912:	e013      	b.n	800193c <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <Audio_MAL_IRQHandler+0xe8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f90a 	bl	8000b34 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <Audio_MAL_IRQHandler+0xe8>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <Audio_MAL_IRQHandler+0xec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	4610      	mov	r0, r2
 800192c:	f7ff f972 	bl	8000c14 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <Audio_MAL_IRQHandler+0xf4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fbce 	bl	80020d8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000018 	.word	0x20000018
 8001944:	2000001c 	.word	0x2000001c
 8001948:	20000010 	.word	0x20000010
 800194c:	2000004c 	.word	0x2000004c
 8001950:	2000008c 	.word	0x2000008c
 8001954:	0001fffe 	.word	0x0001fffe

08001958 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800195c:	f7ff ff7c 	bl	8001858 <Audio_MAL_IRQHandler>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001968:	f7ff ff76 	bl	8001858 <Audio_MAL_IRQHandler>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001974:	2102      	movs	r1, #2
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <SPI3_IRQHandler+0x3c>)
 8001978:	f7ff ff51 	bl	800181e <SPI_I2S_GetFlagStatus>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d011      	beq.n	80019a6 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <SPI3_IRQHandler+0x40>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d106      	bne.n	8001998 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800198a:	f000 fbb0 	bl	80020ee <EVAL_AUDIO_GetSampleCallBack>
 800198e:	4603      	mov	r3, r0
 8001990:	4619      	mov	r1, r3
 8001992:	2004      	movs	r0, #4
 8001994:	f7ff f85a 	bl	8000a4c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001998:	f000 fba9 	bl	80020ee <EVAL_AUDIO_GetSampleCallBack>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <SPI3_IRQHandler+0x3c>)
 80019a2:	f7ff ff2d 	bl	8001800 <SPI_I2S_SendData>
  }
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40003c00 	.word	0x40003c00
 80019b0:	20000014 	.word	0x20000014

080019b4 <codec_init>:


#include "codec.h"

void codec_init()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PinInitStruct;
	GPIO_StructInit(&PinInitStruct);
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f9e4 	bl	8000d8c <GPIO_StructInit>
	I2S_InitTypeDef I2S_InitType;

	I2C_InitTypeDef I2C_InitType;

	//Reset pin as GPIO
	PinInitStruct.GPIO_Pin = CODEC_RESET_PIN;
 80019c4:	2310      	movs	r3, #16
 80019c6:	623b      	str	r3, [r7, #32]
	PinInitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	PinInitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 80019ce:	2302      	movs	r3, #2
 80019d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	PinInitStruct.GPIO_OType = GPIO_OType_PP;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	PinInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80019da:	2302      	movs	r3, #2
 80019dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOB, ENABLE);
 80019e0:	2101      	movs	r1, #1
 80019e2:	200b      	movs	r0, #11
 80019e4:	f7ff fd28 	bl	8001438 <RCC_AHB1PeriphClockCmd>

	GPIO_Init(GPIOD, &PinInitStruct);
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	4619      	mov	r1, r3
 80019ee:	4846      	ldr	r0, [pc, #280]	; (8001b08 <codec_init+0x154>)
 80019f0:	f7ff f93e 	bl	8000c70 <GPIO_Init>

	// I2C pins
	PinInitStruct.GPIO_Mode = GPIO_Mode_AF;
 80019f4:	2302      	movs	r3, #2
 80019f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	PinInitStruct.GPIO_OType = GPIO_OType_OD;
 80019fa:	2301      	movs	r3, #1
 80019fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	PinInitStruct.GPIO_Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 8001a00:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a04:	623b      	str	r3, [r7, #32]
	PinInitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	PinInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOB, &PinInitStruct);
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	4619      	mov	r1, r3
 8001a18:	483c      	ldr	r0, [pc, #240]	; (8001b0c <codec_init+0x158>)
 8001a1a:	f7ff f929 	bl	8000c70 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8001a1e:	2204      	movs	r2, #4
 8001a20:	2106      	movs	r1, #6
 8001a22:	483a      	ldr	r0, [pc, #232]	; (8001b0c <codec_init+0x158>)
 8001a24:	f7ff f9ea 	bl	8000dfc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8001a28:	2204      	movs	r2, #4
 8001a2a:	2109      	movs	r1, #9
 8001a2c:	4837      	ldr	r0, [pc, #220]	; (8001b0c <codec_init+0x158>)
 8001a2e:	f7ff f9e5 	bl	8000dfc <GPIO_PinAFConfig>

	//enable I2S and I2C clocks
	//RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1 | RCC_APB1Periph_SPI3, ENABLE);
 8001a32:	2101      	movs	r1, #1
 8001a34:	f44f 1002 	mov.w	r0, #2129920	; 0x208000
 8001a38:	f7ff fd1e 	bl	8001478 <RCC_APB1PeriphClockCmd>
	RCC_PLLI2SCmd(ENABLE);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fc43 	bl	80012c8 <RCC_PLLI2SCmd>

	// I2S pins
	PinInitStruct.GPIO_OType = GPIO_OType_PP;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	PinInitStruct.GPIO_Pin = I2S3_SCLK_PIN | I2S3_SD_PIN | I2S3_MCLK_PIN;
 8001a48:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a4c:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOC, &PinInitStruct);
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	4619      	mov	r1, r3
 8001a54:	482e      	ldr	r0, [pc, #184]	; (8001b10 <codec_init+0x15c>)
 8001a56:	f7ff f90b 	bl	8000c70 <GPIO_Init>

	PinInitStruct.GPIO_Pin = I2S3_WS_PIN;
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOA, &PinInitStruct);
 8001a5e:	f107 0320 	add.w	r3, r7, #32
 8001a62:	4619      	mov	r1, r3
 8001a64:	482b      	ldr	r0, [pc, #172]	; (8001b14 <codec_init+0x160>)
 8001a66:	f7ff f903 	bl	8000c70 <GPIO_Init>

	//prepare output ports for alternate function
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_SPI3);
 8001a6a:	2206      	movs	r2, #6
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	4829      	ldr	r0, [pc, #164]	; (8001b14 <codec_init+0x160>)
 8001a70:	f7ff f9c4 	bl	8000dfc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_SPI3);
 8001a74:	2206      	movs	r2, #6
 8001a76:	2107      	movs	r1, #7
 8001a78:	4825      	ldr	r0, [pc, #148]	; (8001b10 <codec_init+0x15c>)
 8001a7a:	f7ff f9bf 	bl	8000dfc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SPI3);
 8001a7e:	2206      	movs	r2, #6
 8001a80:	210a      	movs	r1, #10
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <codec_init+0x15c>)
 8001a84:	f7ff f9ba 	bl	8000dfc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SPI3);
 8001a88:	2206      	movs	r2, #6
 8001a8a:	210c      	movs	r1, #12
 8001a8c:	4820      	ldr	r0, [pc, #128]	; (8001b10 <codec_init+0x15c>)
 8001a8e:	f7ff f9b5 	bl	8000dfc <GPIO_PinAFConfig>


	//keep Codec off for now
	GPIO_ResetBits(GPIOD, CODEC_RESET_PIN);
 8001a92:	2110      	movs	r1, #16
 8001a94:	481c      	ldr	r0, [pc, #112]	; (8001b08 <codec_init+0x154>)
 8001a96:	f7ff f9a2 	bl	8000dde <GPIO_ResetBits>


	// configure I2S port
	SPI_I2S_DeInit(CODEC_I2S);
 8001a9a:	481f      	ldr	r0, [pc, #124]	; (8001b18 <codec_init+0x164>)
 8001a9c:	f7ff fd4c 	bl	8001538 <SPI_I2S_DeInit>
	I2S_InitType.I2S_AudioFreq = I2S_AudioFreq_48k;
 8001aa0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001aa4:	61bb      	str	r3, [r7, #24]
	I2S_InitType.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8001aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aaa:	82fb      	strh	r3, [r7, #22]
	I2S_InitType.I2S_DataFormat = I2S_DataFormat_16b;
 8001aac:	2300      	movs	r3, #0
 8001aae:	82bb      	strh	r3, [r7, #20]
	I2S_InitType.I2S_Mode = I2S_Mode_MasterTx;
 8001ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab4:	823b      	strh	r3, [r7, #16]
	I2S_InitType.I2S_Standard = I2S_Standard_Phillips;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	827b      	strh	r3, [r7, #18]
	I2S_InitType.I2S_CPOL = I2S_CPOL_Low;
 8001aba:	2300      	movs	r3, #0
 8001abc:	83bb      	strh	r3, [r7, #28]

	I2S_Init(CODEC_I2S, &I2S_InitType);
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4814      	ldr	r0, [pc, #80]	; (8001b18 <codec_init+0x164>)
 8001ac6:	f7ff fda5 	bl	8001614 <I2S_Init>
	//I2S_Cmd(CODEC_I2S, ENABLE);


	// configure I2C port
	I2C_DeInit(CODEC_I2C);
 8001aca:	4814      	ldr	r0, [pc, #80]	; (8001b1c <codec_init+0x168>)
 8001acc:	f7ff f9e0 	bl	8000e90 <I2C_DeInit>
	I2C_InitType.I2C_ClockSpeed = 100000;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <codec_init+0x16c>)
 8001ad2:	603b      	str	r3, [r7, #0]
	I2C_InitType.I2C_Mode = I2C_Mode_I2C;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	80bb      	strh	r3, [r7, #4]
	I2C_InitType.I2C_OwnAddress1 = CORE_I2C_ADDRESS;
 8001ad8:	2333      	movs	r3, #51	; 0x33
 8001ada:	813b      	strh	r3, [r7, #8]
	I2C_InitType.I2C_Ack = I2C_Ack_Enable;
 8001adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae0:	817b      	strh	r3, [r7, #10]
	I2C_InitType.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001ae2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae6:	81bb      	strh	r3, [r7, #12]
	I2C_InitType.I2C_DutyCycle = I2C_DutyCycle_2;
 8001ae8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001aec:	80fb      	strh	r3, [r7, #6]

	I2C_Cmd(CODEC_I2C, ENABLE);
 8001aee:	2101      	movs	r1, #1
 8001af0:	480a      	ldr	r0, [pc, #40]	; (8001b1c <codec_init+0x168>)
 8001af2:	f7ff fac9 	bl	8001088 <I2C_Cmd>
	I2C_Init(CODEC_I2C, &I2C_InitType);
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	4808      	ldr	r0, [pc, #32]	; (8001b1c <codec_init+0x168>)
 8001afc:	f7ff fa02 	bl	8000f04 <I2C_Init>


}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40003c00 	.word	0x40003c00
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	000186a0 	.word	0x000186a0

08001b24 <codec_ctrl_init>:


void codec_ctrl_init()
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
	uint32_t delaycount;
	uint8_t CodecCommandBuffer[5];

	uint8_t regValue = 0xFF;
 8001b2a:	23ff      	movs	r3, #255	; 0xff
 8001b2c:	72fb      	strb	r3, [r7, #11]

	GPIO_SetBits(GPIOD, CODEC_RESET_PIN);
 8001b2e:	2110      	movs	r1, #16
 8001b30:	4854      	ldr	r0, [pc, #336]	; (8001c84 <codec_ctrl_init+0x160>)
 8001b32:	f7ff f945 	bl	8000dc0 <GPIO_SetBits>
	delaycount = 1000000;
 8001b36:	4b54      	ldr	r3, [pc, #336]	; (8001c88 <codec_ctrl_init+0x164>)
 8001b38:	60fb      	str	r3, [r7, #12]
	while (delaycount > 0)
 8001b3a:	e002      	b.n	8001b42 <codec_ctrl_init+0x1e>
	{
		delaycount--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
	while (delaycount > 0)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <codec_ctrl_init+0x18>
	}
	//keep codec OFF
	CodecCommandBuffer[0] = CODEC_MAP_PLAYBACK_CTRL1;
 8001b48:	230d      	movs	r3, #13
 8001b4a:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x01;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2102      	movs	r1, #2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f899 	bl	8001c8c <send_codec_ctrl>

	//begin initialization sequence (p. 32)
	CodecCommandBuffer[0] = 0x00;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x99;
 8001b5e:	2399      	movs	r3, #153	; 0x99
 8001b60:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2102      	movs	r1, #2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f890 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x47;
 8001b6c:	2347      	movs	r3, #71	; 0x47
 8001b6e:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x80;
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2102      	movs	r1, #2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f887 	bl	8001c8c <send_codec_ctrl>

	regValue = read_codec_register(0x32);
 8001b7e:	2032      	movs	r0, #50	; 0x32
 8001b80:	f000 f8e0 	bl	8001d44 <read_codec_register>
 8001b84:	4603      	mov	r3, r0
 8001b86:	72fb      	strb	r3, [r7, #11]

	CodecCommandBuffer[0] = 0x32;
 8001b88:	2332      	movs	r3, #50	; 0x32
 8001b8a:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = regValue | 0x80;
 8001b8c:	7afb      	ldrb	r3, [r7, #11]
 8001b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f876 	bl	8001c8c <send_codec_ctrl>

	regValue = read_codec_register(0x32);
 8001ba0:	2032      	movs	r0, #50	; 0x32
 8001ba2:	f000 f8cf 	bl	8001d44 <read_codec_register>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	72fb      	strb	r3, [r7, #11]

	CodecCommandBuffer[0] = 0x32;
 8001baa:	2332      	movs	r3, #50	; 0x32
 8001bac:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = regValue & (~0x80);
 8001bae:	7afb      	ldrb	r3, [r7, #11]
 8001bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2102      	movs	r1, #2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f865 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x00;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x00;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f85c 	bl	8001c8c <send_codec_ctrl>
	//end of initialization sequence

	CodecCommandBuffer[0] = CODEC_MAP_PWR_CTRL2;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0xAF;
 8001bd8:	23af      	movs	r3, #175	; 0xaf
 8001bda:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2102      	movs	r1, #2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f853 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = CODEC_MAP_PLAYBACK_CTRL1;
 8001be6:	230d      	movs	r3, #13
 8001be8:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x70;
 8001bea:	2370      	movs	r3, #112	; 0x70
 8001bec:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f84a 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = CODEC_MAP_CLK_CTRL;
 8001bf8:	2305      	movs	r3, #5
 8001bfa:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x81; //auto detect clock
 8001bfc:	2381      	movs	r3, #129	; 0x81
 8001bfe:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2102      	movs	r1, #2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f841 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = CODEC_MAP_IF_CTRL1;
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x07;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2102      	movs	r1, #2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f838 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x0A;
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x00;
 8001c20:	2300      	movs	r3, #0
 8001c22:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2102      	movs	r1, #2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f82f 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x27;
 8001c2e:	2327      	movs	r3, #39	; 0x27
 8001c30:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x00;
 8001c32:	2300      	movs	r3, #0
 8001c34:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f826 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x1A | CODEC_MAPBYTE_INC;
 8001c40:	239a      	movs	r3, #154	; 0x9a
 8001c42:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x0A;
 8001c44:	230a      	movs	r3, #10
 8001c46:	717b      	strb	r3, [r7, #5]
	CodecCommandBuffer[2] = 0x0A;
 8001c48:	230a      	movs	r3, #10
 8001c4a:	71bb      	strb	r3, [r7, #6]
	send_codec_ctrl(CodecCommandBuffer, 3);
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2103      	movs	r1, #3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f81b 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x1F;
 8001c56:	231f      	movs	r3, #31
 8001c58:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x0F;
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2102      	movs	r1, #2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f812 	bl	8001c8c <send_codec_ctrl>

	CodecCommandBuffer[0] = CODEC_MAP_PWR_CTRL1;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x9E;
 8001c6c:	239e      	movs	r3, #158	; 0x9e
 8001c6e:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2102      	movs	r1, #2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f809 	bl	8001c8c <send_codec_ctrl>

}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	000f4240 	.word	0x000f4240

08001c8c <send_codec_ctrl>:

void send_codec_ctrl(uint8_t controlBytes[], uint8_t numBytes)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
	uint8_t bytesSent=0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]

	while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8001c9c:	bf00      	nop
 8001c9e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001ca2:	4823      	ldr	r0, [pc, #140]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001ca4:	f7ff fadc 	bl	8001260 <I2C_GetFlagStatus>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f7      	bne.n	8001c9e <send_codec_ctrl+0x12>
	{
		//just wait until no longer busy
	}

	I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8001cae:	2101      	movs	r1, #1
 8001cb0:	481f      	ldr	r0, [pc, #124]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001cb2:	f7ff fa09 	bl	80010c8 <I2C_GenerateSTART>
	while (!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_SB))
 8001cb6:	bf00      	nop
 8001cb8:	491e      	ldr	r1, [pc, #120]	; (8001d34 <send_codec_ctrl+0xa8>)
 8001cba:	481d      	ldr	r0, [pc, #116]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001cbc:	f7ff fad0 	bl	8001260 <I2C_GetFlagStatus>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f8      	beq.n	8001cb8 <send_codec_ctrl+0x2c>
	{
		//wait for generation of start condition
	}
	I2C_Send7bitAddress(CODEC_I2C, CODEC_I2C_ADDRESS, I2C_Direction_Transmitter);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2194      	movs	r1, #148	; 0x94
 8001cca:	4819      	ldr	r0, [pc, #100]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001ccc:	f7ff fa3c 	bl	8001148 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001cd0:	bf00      	nop
 8001cd2:	4919      	ldr	r1, [pc, #100]	; (8001d38 <send_codec_ctrl+0xac>)
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001cd6:	f7ff fa93 	bl	8001200 <I2C_CheckEvent>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f8      	beq.n	8001cd2 <send_codec_ctrl+0x46>
	{
		//wait for end of address transmission
	}
	while (bytesSent < numBytes)
 8001ce0:	e012      	b.n	8001d08 <send_codec_ctrl+0x7c>
	{
		I2C_SendData(CODEC_I2C, controlBytes[bytesSent]);
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4810      	ldr	r0, [pc, #64]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001cee:	f7ff fa69 	bl	80011c4 <I2C_SendData>
		bytesSent++;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
		while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8001cf8:	bf00      	nop
 8001cfa:	4910      	ldr	r1, [pc, #64]	; (8001d3c <send_codec_ctrl+0xb0>)
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001cfe:	f7ff fa7f 	bl	8001200 <I2C_CheckEvent>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f8      	beq.n	8001cfa <send_codec_ctrl+0x6e>
	while (bytesSent < numBytes)
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d3e8      	bcc.n	8001ce2 <send_codec_ctrl+0x56>
		{
			//wait for transmission of byte
		}
	}
	while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8001d10:	bf00      	nop
 8001d12:	490b      	ldr	r1, [pc, #44]	; (8001d40 <send_codec_ctrl+0xb4>)
 8001d14:	4806      	ldr	r0, [pc, #24]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001d16:	f7ff faa3 	bl	8001260 <I2C_GetFlagStatus>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f8      	beq.n	8001d12 <send_codec_ctrl+0x86>
	{
	    //wait until it's finished sending before creating STOP
	}
	I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8001d20:	2101      	movs	r1, #1
 8001d22:	4803      	ldr	r0, [pc, #12]	; (8001d30 <send_codec_ctrl+0xa4>)
 8001d24:	f7ff f9f0 	bl	8001108 <I2C_GenerateSTOP>

}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40005400 	.word	0x40005400
 8001d34:	10000001 	.word	0x10000001
 8001d38:	00070082 	.word	0x00070082
 8001d3c:	00070080 	.word	0x00070080
 8001d40:	10000004 	.word	0x10000004

08001d44 <read_codec_register>:

uint8_t read_codec_register(uint8_t mapbyte)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedByte = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]

	while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8001d52:	bf00      	nop
 8001d54:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001d58:	4835      	ldr	r0, [pc, #212]	; (8001e30 <read_codec_register+0xec>)
 8001d5a:	f7ff fa81 	bl	8001260 <I2C_GetFlagStatus>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f7      	bne.n	8001d54 <read_codec_register+0x10>
	{
		//just wait until no longer busy
	}

	I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8001d64:	2101      	movs	r1, #1
 8001d66:	4832      	ldr	r0, [pc, #200]	; (8001e30 <read_codec_register+0xec>)
 8001d68:	f7ff f9ae 	bl	80010c8 <I2C_GenerateSTART>
	while (!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_SB))
 8001d6c:	bf00      	nop
 8001d6e:	4931      	ldr	r1, [pc, #196]	; (8001e34 <read_codec_register+0xf0>)
 8001d70:	482f      	ldr	r0, [pc, #188]	; (8001e30 <read_codec_register+0xec>)
 8001d72:	f7ff fa75 	bl	8001260 <I2C_GetFlagStatus>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f8      	beq.n	8001d6e <read_codec_register+0x2a>
	{
		//wait for generation of start condition
	}

	I2C_Send7bitAddress(CODEC_I2C, CODEC_I2C_ADDRESS, I2C_Direction_Transmitter);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2194      	movs	r1, #148	; 0x94
 8001d80:	482b      	ldr	r0, [pc, #172]	; (8001e30 <read_codec_register+0xec>)
 8001d82:	f7ff f9e1 	bl	8001148 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001d86:	bf00      	nop
 8001d88:	492b      	ldr	r1, [pc, #172]	; (8001e38 <read_codec_register+0xf4>)
 8001d8a:	4829      	ldr	r0, [pc, #164]	; (8001e30 <read_codec_register+0xec>)
 8001d8c:	f7ff fa38 	bl	8001200 <I2C_CheckEvent>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f8      	beq.n	8001d88 <read_codec_register+0x44>
	{
		//wait for end of address transmission
	}

	I2C_SendData(CODEC_I2C, mapbyte); //sets the transmitter address
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4825      	ldr	r0, [pc, #148]	; (8001e30 <read_codec_register+0xec>)
 8001d9c:	f7ff fa12 	bl	80011c4 <I2C_SendData>
	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8001da0:	bf00      	nop
 8001da2:	4926      	ldr	r1, [pc, #152]	; (8001e3c <read_codec_register+0xf8>)
 8001da4:	4822      	ldr	r0, [pc, #136]	; (8001e30 <read_codec_register+0xec>)
 8001da6:	f7ff fa2b 	bl	8001200 <I2C_CheckEvent>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f8      	beq.n	8001da2 <read_codec_register+0x5e>
	{
		//wait for transmission of byte
	}

	I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8001db0:	2101      	movs	r1, #1
 8001db2:	481f      	ldr	r0, [pc, #124]	; (8001e30 <read_codec_register+0xec>)
 8001db4:	f7ff f9a8 	bl	8001108 <I2C_GenerateSTOP>

	while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8001db8:	bf00      	nop
 8001dba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001dbe:	481c      	ldr	r0, [pc, #112]	; (8001e30 <read_codec_register+0xec>)
 8001dc0:	f7ff fa4e 	bl	8001260 <I2C_GetFlagStatus>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f7      	bne.n	8001dba <read_codec_register+0x76>
	{
		//just wait until no longer busy
	}

	I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4818      	ldr	r0, [pc, #96]	; (8001e30 <read_codec_register+0xec>)
 8001dce:	f7ff f9d9 	bl	8001184 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4816      	ldr	r0, [pc, #88]	; (8001e30 <read_codec_register+0xec>)
 8001dd6:	f7ff f977 	bl	80010c8 <I2C_GenerateSTART>
	while (!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_SB))
 8001dda:	bf00      	nop
 8001ddc:	4915      	ldr	r1, [pc, #84]	; (8001e34 <read_codec_register+0xf0>)
 8001dde:	4814      	ldr	r0, [pc, #80]	; (8001e30 <read_codec_register+0xec>)
 8001de0:	f7ff fa3e 	bl	8001260 <I2C_GetFlagStatus>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f8      	beq.n	8001ddc <read_codec_register+0x98>
	{
		//wait for generation of start condition
	}

	I2C_Send7bitAddress(CODEC_I2C, CODEC_I2C_ADDRESS, I2C_Direction_Receiver);
 8001dea:	2201      	movs	r2, #1
 8001dec:	2194      	movs	r1, #148	; 0x94
 8001dee:	4810      	ldr	r0, [pc, #64]	; (8001e30 <read_codec_register+0xec>)
 8001df0:	f7ff f9aa 	bl	8001148 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 8001df4:	bf00      	nop
 8001df6:	4912      	ldr	r1, [pc, #72]	; (8001e40 <read_codec_register+0xfc>)
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <read_codec_register+0xec>)
 8001dfa:	f7ff fa01 	bl	8001200 <I2C_CheckEvent>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f8      	beq.n	8001df6 <read_codec_register+0xb2>
	{
		//wait for end of address transmission
	}

	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_RECEIVED))
 8001e04:	bf00      	nop
 8001e06:	490f      	ldr	r1, [pc, #60]	; (8001e44 <read_codec_register+0x100>)
 8001e08:	4809      	ldr	r0, [pc, #36]	; (8001e30 <read_codec_register+0xec>)
 8001e0a:	f7ff f9f9 	bl	8001200 <I2C_CheckEvent>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f8      	beq.n	8001e06 <read_codec_register+0xc2>
	{
		//wait until byte arrived
	}
	receivedByte = I2C_ReceiveData(CODEC_I2C);
 8001e14:	4806      	ldr	r0, [pc, #24]	; (8001e30 <read_codec_register+0xec>)
 8001e16:	f7ff f9e5 	bl	80011e4 <I2C_ReceiveData>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	73fb      	strb	r3, [r7, #15]

	I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4803      	ldr	r0, [pc, #12]	; (8001e30 <read_codec_register+0xec>)
 8001e22:	f7ff f971 	bl	8001108 <I2C_GenerateSTOP>

	return receivedByte;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40005400 	.word	0x40005400
 8001e34:	10000001 	.word	0x10000001
 8001e38:	00070082 	.word	0x00070082
 8001e3c:	00070080 	.word	0x00070080
 8001e40:	00030002 	.word	0x00030002
 8001e44:	00030040 	.word	0x00030040

08001e48 <main>:

#include "main.h"


int main(void)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b093      	sub	sp, #76	; 0x4c
 8001e4c:	af00      	add	r7, sp, #0
	SystemInit();
 8001e4e:	f000 f9af 	bl	80021b0 <SystemInit>

	fir_8 filt;

	//enables GPIO clock for PortD
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001e52:	2101      	movs	r1, #1
 8001e54:	2008      	movs	r0, #8
 8001e56:	f7ff faef 	bl	8001438 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8001e5a:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <main+0x158>)
 8001e5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e60:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001e62:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <main+0x158>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <main+0x158>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <main+0x158>)
 8001e70:	2202      	movs	r2, #2
 8001e72:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001e74:	494a      	ldr	r1, [pc, #296]	; (8001fa0 <main+0x158>)
 8001e76:	484b      	ldr	r0, [pc, #300]	; (8001fa4 <main+0x15c>)
 8001e78:	f7fe fefa 	bl	8000c70 <GPIO_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2004      	movs	r0, #4
 8001e80:	f7ff fada 	bl	8001438 <RCC_AHB1PeriphClockCmd>

	codec_init();
 8001e84:	f7ff fd96 	bl	80019b4 <codec_init>
	codec_ctrl_init();
 8001e88:	f7ff fe4c 	bl	8001b24 <codec_ctrl_init>

	I2S_Cmd(CODEC_I2S, ENABLE);
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4846      	ldr	r0, [pc, #280]	; (8001fa8 <main+0x160>)
 8001e90:	f7ff fc96 	bl	80017c0 <I2S_Cmd>

	initFilter(&filt);
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f8e0 	bl	800205c <initFilter>


    while(1)
    {

    	if (SPI_I2S_GetFlagStatus(CODEC_I2S, SPI_I2S_FLAG_TXE))
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	4842      	ldr	r0, [pc, #264]	; (8001fa8 <main+0x160>)
 8001ea0:	f7ff fcbd 	bl	800181e <SPI_I2S_GetFlagStatus>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d05b      	beq.n	8001f62 <main+0x11a>
    	{
    		SPI_I2S_SendData(CODEC_I2S, sample);
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <main+0x164>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	483c      	ldr	r0, [pc, #240]	; (8001fa8 <main+0x160>)
 8001eb6:	f7ff fca3 	bl	8001800 <SPI_I2S_SendData>

    		//only update on every second sample to insure that L & R ch. have the same sample value
    		if (sampleCounter & 0x00000001)
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <main+0x168>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d048      	beq.n	8001f58 <main+0x110>
    		{
    			sawWave += NOTEFREQUENCY;
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <main+0x16c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fae0 	bl	8000490 <__aeabi_f2d>
 8001ed0:	a331      	add	r3, pc, #196	; (adr r3, 8001f98 <main+0x150>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe f97d 	bl	80001d4 <__adddf3>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	f7fe fd63 	bl	80009ac <__aeabi_d2f>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <main+0x16c>)
 8001eea:	601a      	str	r2, [r3, #0]
    			if (sawWave > 1.0)
 8001eec:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <main+0x16c>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	dd09      	ble.n	8001f14 <main+0xcc>
    				sawWave -= 2.0;
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <main+0x16c>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001f0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <main+0x16c>)
 8001f10:	edc3 7a00 	vstr	s15, [r3]

    			filteredSaw = updateFilter(&filt, sawWave);
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <main+0x16c>)
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f84f 	bl	8001fc4 <updateFilter>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <main+0x170>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]

    			sample = (int16_t)(NOTEAMPLITUDE*filteredSaw);
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <main+0x170>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe faab 	bl	8000490 <__aeabi_f2d>
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <main+0x174>)
 8001f40:	f7fe fafa 	bl	8000538 <__aeabi_dmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	f7fe fd06 	bl	800095c <__aeabi_d2iz>
 8001f50:	4603      	mov	r3, r0
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <main+0x164>)
 8001f56:	801a      	strh	r2, [r3, #0]
    		}
    		sampleCounter++;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <main+0x168>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <main+0x168>)
 8001f60:	6013      	str	r3, [r2, #0]
    	}

    	if (sampleCounter==48000)
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <main+0x168>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d104      	bne.n	8001f78 <main+0x130>
    	{
    		LED_BLUE_OFF;
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <main+0x15c>)
 8001f70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f74:	835a      	strh	r2, [r3, #26]
 8001f76:	e791      	b.n	8001e9c <main+0x54>

    	}
    	else if (sampleCounter == 96000)
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <main+0x168>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <main+0x178>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d18c      	bne.n	8001e9c <main+0x54>
    	{
    		LED_BLUE_ON;
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <main+0x15c>)
 8001f84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f88:	831a      	strh	r2, [r3, #24]
    		sampleCounter = 0;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <main+0x168>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    	if (SPI_I2S_GetFlagStatus(CODEC_I2S, SPI_I2S_FLAG_TXE))
 8001f90:	e784      	b.n	8001e9c <main+0x54>
 8001f92:	bf00      	nop
 8001f94:	f3af 8000 	nop.w
 8001f98:	eb851eb8 	.word	0xeb851eb8
 8001f9c:	3f8eb851 	.word	0x3f8eb851
 8001fa0:	200000c8 	.word	0x200000c8
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40003c00 	.word	0x40003c00
 8001fac:	20000040 	.word	0x20000040
 8001fb0:	2000003c 	.word	0x2000003c
 8001fb4:	20000044 	.word	0x20000044
 8001fb8:	20000048 	.word	0x20000048
 8001fbc:	407f4000 	.word	0x407f4000
 8001fc0:	00017700 	.word	0x00017700

08001fc4 <updateFilter>:
    }
}

// a very crude FIR lowpass filter
float updateFilter(fir_8* filt, float val)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	ed87 0a00 	vstr	s0, [r7]
	uint16_t valIndex;
	uint16_t paramIndex;
	float outval = 0.0;
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]

	valIndex = filt->currIndex;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fdc:	81fb      	strh	r3, [r7, #14]
	filt->tabs[valIndex] = val;
 8001fde:	89fb      	ldrh	r3, [r7, #14]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	601a      	str	r2, [r3, #0]

	for (paramIndex=0; paramIndex<8; paramIndex++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	82fb      	strh	r3, [r7, #22]
 8001fee:	e01c      	b.n	800202a <updateFilter+0x66>
	{
		outval += (filt->params[paramIndex]) * (filt->tabs[(valIndex+paramIndex)&0x07]);
 8001ff0:	8afb      	ldrh	r3, [r7, #22]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	ed93 7a00 	vldr	s14, [r3]
 8001ffe:	89fa      	ldrh	r2, [r7, #14]
 8002000:	8afb      	ldrh	r3, [r7, #22]
 8002002:	4413      	add	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002018:	ed97 7a04 	vldr	s14, [r7, #16]
 800201c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002020:	edc7 7a04 	vstr	s15, [r7, #16]
	for (paramIndex=0; paramIndex<8; paramIndex++)
 8002024:	8afb      	ldrh	r3, [r7, #22]
 8002026:	3301      	adds	r3, #1
 8002028:	82fb      	strh	r3, [r7, #22]
 800202a:	8afb      	ldrh	r3, [r7, #22]
 800202c:	2b07      	cmp	r3, #7
 800202e:	d9df      	bls.n	8001ff0 <updateFilter+0x2c>
	}

	valIndex++;
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	3301      	adds	r3, #1
 8002034:	81fb      	strh	r3, [r7, #14]
	valIndex &= 0x07;
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	81fb      	strh	r3, [r7, #14]

	filt->currIndex = valIndex;
 800203e:	89fb      	ldrh	r3, [r7, #14]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	return outval;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	ee07 3a90 	vmov	s15, r3
}
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <initFilter>:

void initFilter(fir_8* theFilter)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	uint8_t i;

	theFilter->currIndex = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	for (i=0; i<8; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e009      	b.n	8002086 <initFilter+0x2a>
		theFilter->tabs[i] = 0.0;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
	for (i=0; i<8; i++)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3301      	adds	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b07      	cmp	r3, #7
 800208a:	d9f2      	bls.n	8002072 <initFilter+0x16>

	theFilter->params[0] = 0.01;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <initFilter+0x6c>)
 8002090:	621a      	str	r2, [r3, #32]
	theFilter->params[1] = 0.05;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <initFilter+0x70>)
 8002096:	625a      	str	r2, [r3, #36]	; 0x24
	theFilter->params[2] = 0.12;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <initFilter+0x74>)
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
	theFilter->params[3] = 0.32;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <initFilter+0x78>)
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
	theFilter->params[4] = 0.32;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <initFilter+0x78>)
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
	theFilter->params[5] = 0.12;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <initFilter+0x74>)
 80020ae:	635a      	str	r2, [r3, #52]	; 0x34
	theFilter->params[6] = 0.05;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <initFilter+0x70>)
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
	theFilter->params[7] = 0.01;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <initFilter+0x6c>)
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	3c23d70a 	.word	0x3c23d70a
 80020cc:	3d4ccccd 	.word	0x3d4ccccd
 80020d0:	3df5c28f 	.word	0x3df5c28f
 80020d4:	3ea3d70a 	.word	0x3ea3d70a

080020d8 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80020e2:	bf00      	nop
}
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80020f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002106:	e003      	b.n	8002110 <LoopCopyDataInit>

08002108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800210a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800210c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800210e:	3104      	adds	r1, #4

08002110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002118:	d3f6      	bcc.n	8002108 <CopyDataInit>
  ldr  r2, =_sbss
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800211c:	e002      	b.n	8002124 <LoopFillZerobss>

0800211e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800211e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002120:	f842 3b04 	str.w	r3, [r2], #4

08002124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002128:	d3f9      	bcc.n	800211e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212a:	f000 f841 	bl	80021b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f000 f8f1 	bl	8002314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7ff fe89 	bl	8001e48 <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002138:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800213c:	0800237c 	.word	0x0800237c
  ldr  r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002144:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8002148:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 800214c:	200000d0 	.word	0x200000d0

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>

08002152 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002164:	e7fe      	b.n	8002164 <HardFault_Handler+0x4>

08002166 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800216a:	e7fe      	b.n	800216a <MemManage_Handler+0x4>

0800216c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002170:	e7fe      	b.n	8002170 <BusFault_Handler+0x4>

08002172 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002176:	e7fe      	b.n	8002176 <UsageFault_Handler+0x4>

08002178 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b4:	4a16      	ldr	r2, [pc, #88]	; (8002210 <SystemInit+0x60>)
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <SystemInit+0x60>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <SystemInit+0x64>)
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <SystemInit+0x64>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <SystemInit+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <SystemInit+0x64>)
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <SystemInit+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80021e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <SystemInit+0x64>)
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <SystemInit+0x68>)
 80021ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <SystemInit+0x64>)
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <SystemInit+0x64>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <SystemInit+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80021fe:	f000 f80d 	bl	800221c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002202:	4b03      	ldr	r3, [pc, #12]	; (8002210 <SystemInit+0x60>)
 8002204:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002208:	609a      	str	r2, [r3, #8]
#endif
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00
 8002214:	40023800 	.word	0x40023800
 8002218:	24003010 	.word	0x24003010

0800221c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800222a:	4a36      	ldr	r2, [pc, #216]	; (8002304 <SetSysClock+0xe8>)
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <SetSysClock+0xe8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002236:	4b33      	ldr	r3, [pc, #204]	; (8002304 <SetSysClock+0xe8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <SetSysClock+0x38>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002252:	d1f0      	bne.n	8002236 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <SetSysClock+0xe8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002260:	2301      	movs	r3, #1
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	e001      	b.n	800226a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d142      	bne.n	80022f6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <SetSysClock+0xe8>)
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <SetSysClock+0xe8>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800227c:	4a22      	ldr	r2, [pc, #136]	; (8002308 <SetSysClock+0xec>)
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <SetSysClock+0xec>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002286:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002288:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <SetSysClock+0xe8>)
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <SetSysClock+0xe8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002290:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <SetSysClock+0xe8>)
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <SetSysClock+0xe8>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <SetSysClock+0xe8>)
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <SetSysClock+0xe8>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80022a6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <SetSysClock+0xe8>)
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <SetSysClock+0xf0>)
 80022ac:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <SetSysClock+0xe8>)
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <SetSysClock+0xe8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80022ba:	bf00      	nop
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <SetSysClock+0xe8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f9      	beq.n	80022bc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <SetSysClock+0xf4>)
 80022ca:	f240 6205 	movw	r2, #1541	; 0x605
 80022ce:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <SetSysClock+0xe8>)
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <SetSysClock+0xe8>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <SetSysClock+0xe8>)
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <SetSysClock+0xe8>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80022e8:	bf00      	nop
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <SetSysClock+0xe8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d1f9      	bne.n	80022ea <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000
 800230c:	07405408 	.word	0x07405408
 8002310:	40023c00 	.word	0x40023c00

08002314 <__libc_init_array>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	4e0d      	ldr	r6, [pc, #52]	; (800234c <__libc_init_array+0x38>)
 8002318:	4c0d      	ldr	r4, [pc, #52]	; (8002350 <__libc_init_array+0x3c>)
 800231a:	1ba4      	subs	r4, r4, r6
 800231c:	10a4      	asrs	r4, r4, #2
 800231e:	2500      	movs	r5, #0
 8002320:	42a5      	cmp	r5, r4
 8002322:	d109      	bne.n	8002338 <__libc_init_array+0x24>
 8002324:	4e0b      	ldr	r6, [pc, #44]	; (8002354 <__libc_init_array+0x40>)
 8002326:	4c0c      	ldr	r4, [pc, #48]	; (8002358 <__libc_init_array+0x44>)
 8002328:	f000 f818 	bl	800235c <_init>
 800232c:	1ba4      	subs	r4, r4, r6
 800232e:	10a4      	asrs	r4, r4, #2
 8002330:	2500      	movs	r5, #0
 8002332:	42a5      	cmp	r5, r4
 8002334:	d105      	bne.n	8002342 <__libc_init_array+0x2e>
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800233c:	4798      	blx	r3
 800233e:	3501      	adds	r5, #1
 8002340:	e7ee      	b.n	8002320 <__libc_init_array+0xc>
 8002342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002346:	4798      	blx	r3
 8002348:	3501      	adds	r5, #1
 800234a:	e7f2      	b.n	8002332 <__libc_init_array+0x1e>
 800234c:	08002374 	.word	0x08002374
 8002350:	08002374 	.word	0x08002374
 8002354:	08002374 	.word	0x08002374
 8002358:	08002378 	.word	0x08002378

0800235c <_init>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr

08002368 <_fini>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr
